//
// Copyright 2021 Layotto Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: ./consul.go

// Package utils is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/hashicorp/consul/api"
)

// MockConsulClient is a mock of ConsulClient interface.
type MockConsulClient struct {
	ctrl     *gomock.Controller
	recorder *MockConsulClientMockRecorder
}

// MockConsulClientMockRecorder is the mock recorder for MockConsulClient.
type MockConsulClientMockRecorder struct {
	mock *MockConsulClient
}

// NewMockConsulClient creates a new mock instance.
func NewMockConsulClient(ctrl *gomock.Controller) *MockConsulClient {
	mock := &MockConsulClient{ctrl: ctrl}
	mock.recorder = &MockConsulClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsulClient) EXPECT() *MockConsulClientMockRecorder {
	return m.recorder
}

// Session mocks base method.
func (m *MockConsulClient) Session() *api.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session")
	ret0, _ := ret[0].(*api.Session)
	return ret0
}

// Session indicates an expected call of Session.
func (mr *MockConsulClientMockRecorder) Session() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockConsulClient)(nil).Session))
}

// MockConsulKV is a mock of ConsulKV interface.
type MockConsulKV struct {
	ctrl     *gomock.Controller
	recorder *MockConsulKVMockRecorder
}

// MockConsulKVMockRecorder is the mock recorder for MockConsulKV.
type MockConsulKVMockRecorder struct {
	mock *MockConsulKV
}

// NewMockConsulKV creates a new mock instance.
func NewMockConsulKV(ctrl *gomock.Controller) *MockConsulKV {
	mock := &MockConsulKV{ctrl: ctrl}
	mock.recorder = &MockConsulKVMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsulKV) EXPECT() *MockConsulKVMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockConsulKV) Acquire(p *api.KVPair, q *api.WriteOptions) (bool, *api.WriteMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire", p, q)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*api.WriteMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Acquire indicates an expected call of Acquire.
func (mr *MockConsulKVMockRecorder) Acquire(p, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockConsulKV)(nil).Acquire), p, q)
}

// Release mocks base method.
func (m *MockConsulKV) Release(p *api.KVPair, q *api.WriteOptions) (bool, *api.WriteMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", p, q)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*api.WriteMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Release indicates an expected call of Release.
func (mr *MockConsulKVMockRecorder) Release(p, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockConsulKV)(nil).Release), p, q)
}

// MockSessionFactory is a mock of SessionFactory interface.
type MockSessionFactory struct {
	ctrl     *gomock.Controller
	recorder *MockSessionFactoryMockRecorder
}

// MockSessionFactoryMockRecorder is the mock recorder for MockSessionFactory.
type MockSessionFactoryMockRecorder struct {
	mock *MockSessionFactory
}

// NewMockSessionFactory creates a new mock instance.
func NewMockSessionFactory(ctrl *gomock.Controller) *MockSessionFactory {
	mock := &MockSessionFactory{ctrl: ctrl}
	mock.recorder = &MockSessionFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionFactory) EXPECT() *MockSessionFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSessionFactory) Create(se *api.SessionEntry, q *api.WriteOptions) (string, *api.WriteMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", se, q)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*api.WriteMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockSessionFactoryMockRecorder) Create(se, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionFactory)(nil).Create), se, q)
}

// Destroy mocks base method.
func (m *MockSessionFactory) Destroy(id string, q *api.WriteOptions) (*api.WriteMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", id, q)
	ret0, _ := ret[0].(*api.WriteMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Destroy indicates an expected call of Destroy.
func (mr *MockSessionFactoryMockRecorder) Destroy(id, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockSessionFactory)(nil).Destroy), id, q)
}
