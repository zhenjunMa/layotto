/*
 * Copyright 2021 Layotto Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: qiniu_oss_client.go

// Package qiniu is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/qiniu/go-sdk/v7/storage"
)

// MockFormUploader is a mock of FormUploader interface.
type MockFormUploader struct {
	ctrl     *gomock.Controller
	recorder *MockFormUploaderMockRecorder
}

// MockFormUploaderMockRecorder is the mock recorder for MockFormUploader.
type MockFormUploaderMockRecorder struct {
	mock *MockFormUploader
}

// NewMockFormUploader creates a new mock instance.
func NewMockFormUploader(ctrl *gomock.Controller) *MockFormUploader {
	mock := &MockFormUploader{ctrl: ctrl}
	mock.recorder = &MockFormUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFormUploader) EXPECT() *MockFormUploaderMockRecorder {
	return m.recorder
}

// Put mocks base method.
func (m *MockFormUploader) Put(ctx context.Context, ret interface{}, uptoken, key string, data io.Reader, size int64, extra *storage.PutExtra) error {
	m.ctrl.T.Helper()
	ret_2 := m.ctrl.Call(m, "Put", ctx, ret, uptoken, key, data, size, extra)
	ret0, _ := ret_2[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockFormUploaderMockRecorder) Put(ctx, ret, uptoken, key, data, size, extra interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockFormUploader)(nil).Put), ctx, ret, uptoken, key, data, size, extra)
}

// MockBucketManager is a mock of BucketManager interface.
type MockBucketManager struct {
	ctrl     *gomock.Controller
	recorder *MockBucketManagerMockRecorder
}

// MockBucketManagerMockRecorder is the mock recorder for MockBucketManager.
type MockBucketManagerMockRecorder struct {
	mock *MockBucketManager
}

// NewMockBucketManager creates a new mock instance.
func NewMockBucketManager(ctrl *gomock.Controller) *MockBucketManager {
	mock := &MockBucketManager{ctrl: ctrl}
	mock.recorder = &MockBucketManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBucketManager) EXPECT() *MockBucketManagerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockBucketManager) Delete(bucket, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", bucket, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBucketManagerMockRecorder) Delete(bucket, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBucketManager)(nil).Delete), bucket, key)
}

// ListFiles mocks base method.
func (m *MockBucketManager) ListFiles(bucket, prefix, delimiter, marker string, limit int) ([]storage.ListItem, []string, string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", bucket, prefix, delimiter, marker, limit)
	ret0, _ := ret[0].([]storage.ListItem)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(bool)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockBucketManagerMockRecorder) ListFiles(bucket, prefix, delimiter, marker, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockBucketManager)(nil).ListFiles), bucket, prefix, delimiter, marker, limit)
}

// Stat mocks base method.
func (m *MockBucketManager) Stat(bucket, key string) (storage.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", bucket, key)
	ret0, _ := ret[0].(storage.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockBucketManagerMockRecorder) Stat(bucket, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockBucketManager)(nil).Stat), bucket, key)
}
