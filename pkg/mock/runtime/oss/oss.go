// Code generated by MockGen. DO NOT EDIT.
// Source: oss_grpc.pb.go

// Package mock_s3 is a generated GoMock package.
package mock_s3

import (
	context "context"
	reflect "reflect"

	"mosn.io/layotto/spec/proto/extension/v1/s3"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockObjectStorageServiceClient is a mock of ObjectStorageServiceClient interface.
type MockObjectStorageServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStorageServiceClientMockRecorder
}

// MockObjectStorageServiceClientMockRecorder is the mock recorder for MockObjectStorageServiceClient.
type MockObjectStorageServiceClientMockRecorder struct {
	mock *MockObjectStorageServiceClient
}

// NewMockObjectStorageServiceClient creates a new mock instance.
func NewMockObjectStorageServiceClient(ctrl *gomock.Controller) *MockObjectStorageServiceClient {
	mock := &MockObjectStorageServiceClient{ctrl: ctrl}
	mock.recorder = &MockObjectStorageServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStorageServiceClient) EXPECT() *MockObjectStorageServiceClientMockRecorder {
	return m.recorder
}

// AbortMultipartUpload mocks base method.
func (m *MockObjectStorageServiceClient) AbortMultipartUpload(ctx context.Context, in *s3.AbortMultipartUploadInput, opts ...grpc.CallOption) (*s3.AbortMultipartUploadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AbortMultipartUpload", varargs...)
	ret0, _ := ret[0].(*s3.AbortMultipartUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AbortMultipartUpload indicates an expected call of AbortMultipartUpload.
func (mr *MockObjectStorageServiceClientMockRecorder) AbortMultipartUpload(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortMultipartUpload", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).AbortMultipartUpload), varargs...)
}

// AppendObject mocks base method.
func (m *MockObjectStorageServiceClient) AppendObject(ctx context.Context, opts ...grpc.CallOption) (s3.ObjectStorageService_AppendObjectClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AppendObject", varargs...)
	ret0, _ := ret[0].(s3.ObjectStorageService_AppendObjectClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendObject indicates an expected call of AppendObject.
func (mr *MockObjectStorageServiceClientMockRecorder) AppendObject(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendObject", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).AppendObject), varargs...)
}

// CompleteMultipartUpload mocks base method.
func (m *MockObjectStorageServiceClient) CompleteMultipartUpload(ctx context.Context, in *s3.CompleteMultipartUploadInput, opts ...grpc.CallOption) (*s3.CompleteMultipartUploadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompleteMultipartUpload", varargs...)
	ret0, _ := ret[0].(*s3.CompleteMultipartUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteMultipartUpload indicates an expected call of CompleteMultipartUpload.
func (mr *MockObjectStorageServiceClientMockRecorder) CompleteMultipartUpload(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteMultipartUpload", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).CompleteMultipartUpload), varargs...)
}

// CopyObject mocks base method.
func (m *MockObjectStorageServiceClient) CopyObject(ctx context.Context, in *s3.CopyObjectInput, opts ...grpc.CallOption) (*s3.CopyObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyObject", varargs...)
	ret0, _ := ret[0].(*s3.CopyObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyObject indicates an expected call of CopyObject.
func (mr *MockObjectStorageServiceClientMockRecorder) CopyObject(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyObject", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).CopyObject), varargs...)
}

// CreateMultipartUpload mocks base method.
func (m *MockObjectStorageServiceClient) CreateMultipartUpload(ctx context.Context, in *s3.CreateMultipartUploadInput, opts ...grpc.CallOption) (*s3.CreateMultipartUploadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMultipartUpload", varargs...)
	ret0, _ := ret[0].(*s3.CreateMultipartUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMultipartUpload indicates an expected call of CreateMultipartUpload.
func (mr *MockObjectStorageServiceClientMockRecorder) CreateMultipartUpload(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultipartUpload", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).CreateMultipartUpload), varargs...)
}

// DeleteObject mocks base method.
func (m *MockObjectStorageServiceClient) DeleteObject(ctx context.Context, in *s3.DeleteObjectInput, opts ...grpc.CallOption) (*s3.DeleteObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteObject", varargs...)
	ret0, _ := ret[0].(*s3.DeleteObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockObjectStorageServiceClientMockRecorder) DeleteObject(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).DeleteObject), varargs...)
}

// DeleteObjectTagging mocks base method.
func (m *MockObjectStorageServiceClient) DeleteObjectTagging(ctx context.Context, in *s3.DeleteObjectTaggingInput, opts ...grpc.CallOption) (*s3.DeleteObjectTaggingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteObjectTagging", varargs...)
	ret0, _ := ret[0].(*s3.DeleteObjectTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObjectTagging indicates an expected call of DeleteObjectTagging.
func (mr *MockObjectStorageServiceClientMockRecorder) DeleteObjectTagging(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectTagging", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).DeleteObjectTagging), varargs...)
}

// DeleteObjects mocks base method.
func (m *MockObjectStorageServiceClient) DeleteObjects(ctx context.Context, in *s3.DeleteObjectsInput, opts ...grpc.CallOption) (*s3.DeleteObjectsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteObjects", varargs...)
	ret0, _ := ret[0].(*s3.DeleteObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObjects indicates an expected call of DeleteObjects.
func (mr *MockObjectStorageServiceClientMockRecorder) DeleteObjects(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjects", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).DeleteObjects), varargs...)
}

// GetObject mocks base method.
func (m *MockObjectStorageServiceClient) GetObject(ctx context.Context, in *s3.GetObjectInput, opts ...grpc.CallOption) (s3.ObjectStorageService_GetObjectClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObject", varargs...)
	ret0, _ := ret[0].(s3.ObjectStorageService_GetObjectClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockObjectStorageServiceClientMockRecorder) GetObject(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).GetObject), varargs...)
}

// GetObjectCannedAcl mocks base method.
func (m *MockObjectStorageServiceClient) GetObjectCannedAcl(ctx context.Context, in *s3.GetObjectCannedAclInput, opts ...grpc.CallOption) (*s3.GetObjectCannedAclOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObjectCannedAcl", varargs...)
	ret0, _ := ret[0].(*s3.GetObjectCannedAclOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectCannedAcl indicates an expected call of GetObjectCannedAcl.
func (mr *MockObjectStorageServiceClientMockRecorder) GetObjectCannedAcl(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectCannedAcl", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).GetObjectCannedAcl), varargs...)
}

// GetObjectTagging mocks base method.
func (m *MockObjectStorageServiceClient) GetObjectTagging(ctx context.Context, in *s3.GetObjectTaggingInput, opts ...grpc.CallOption) (*s3.GetObjectTaggingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObjectTagging", varargs...)
	ret0, _ := ret[0].(*s3.GetObjectTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectTagging indicates an expected call of GetObjectTagging.
func (mr *MockObjectStorageServiceClientMockRecorder) GetObjectTagging(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectTagging", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).GetObjectTagging), varargs...)
}

// HeadObject mocks base method.
func (m *MockObjectStorageServiceClient) HeadObject(ctx context.Context, in *s3.HeadObjectInput, opts ...grpc.CallOption) (*s3.HeadObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeadObject", varargs...)
	ret0, _ := ret[0].(*s3.HeadObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadObject indicates an expected call of HeadObject.
func (mr *MockObjectStorageServiceClientMockRecorder) HeadObject(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadObject", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).HeadObject), varargs...)
}

// IsObjectExist mocks base method.
func (m *MockObjectStorageServiceClient) IsObjectExist(ctx context.Context, in *s3.IsObjectExistInput, opts ...grpc.CallOption) (*s3.IsObjectExistOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsObjectExist", varargs...)
	ret0, _ := ret[0].(*s3.IsObjectExistOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsObjectExist indicates an expected call of IsObjectExist.
func (mr *MockObjectStorageServiceClientMockRecorder) IsObjectExist(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsObjectExist", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).IsObjectExist), varargs...)
}

// ListMultipartUploads mocks base method.
func (m *MockObjectStorageServiceClient) ListMultipartUploads(ctx context.Context, in *s3.ListMultipartUploadsInput, opts ...grpc.CallOption) (*s3.ListMultipartUploadsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMultipartUploads", varargs...)
	ret0, _ := ret[0].(*s3.ListMultipartUploadsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMultipartUploads indicates an expected call of ListMultipartUploads.
func (mr *MockObjectStorageServiceClientMockRecorder) ListMultipartUploads(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMultipartUploads", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).ListMultipartUploads), varargs...)
}

// ListObjectVersions mocks base method.
func (m *MockObjectStorageServiceClient) ListObjectVersions(ctx context.Context, in *s3.ListObjectVersionsInput, opts ...grpc.CallOption) (*s3.ListObjectVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListObjectVersions", varargs...)
	ret0, _ := ret[0].(*s3.ListObjectVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectVersions indicates an expected call of ListObjectVersions.
func (mr *MockObjectStorageServiceClientMockRecorder) ListObjectVersions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectVersions", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).ListObjectVersions), varargs...)
}

// ListObjects mocks base method.
func (m *MockObjectStorageServiceClient) ListObjects(ctx context.Context, in *s3.ListObjectsInput, opts ...grpc.CallOption) (*s3.ListObjectsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListObjects", varargs...)
	ret0, _ := ret[0].(*s3.ListObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjects indicates an expected call of ListObjects.
func (mr *MockObjectStorageServiceClientMockRecorder) ListObjects(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjects", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).ListObjects), varargs...)
}

// ListParts mocks base method.
func (m *MockObjectStorageServiceClient) ListParts(ctx context.Context, in *s3.ListPartsInput, opts ...grpc.CallOption) (*s3.ListPartsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListParts", varargs...)
	ret0, _ := ret[0].(*s3.ListPartsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListParts indicates an expected call of ListParts.
func (mr *MockObjectStorageServiceClientMockRecorder) ListParts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParts", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).ListParts), varargs...)
}

// PutObject mocks base method.
func (m *MockObjectStorageServiceClient) PutObject(ctx context.Context, opts ...grpc.CallOption) (s3.ObjectStorageService_PutObjectClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutObject", varargs...)
	ret0, _ := ret[0].(s3.ObjectStorageService_PutObjectClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *MockObjectStorageServiceClientMockRecorder) PutObject(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).PutObject), varargs...)
}

// PutObjectCannedAcl mocks base method.
func (m *MockObjectStorageServiceClient) PutObjectCannedAcl(ctx context.Context, in *s3.PutObjectCannedAclInput, opts ...grpc.CallOption) (*s3.PutObjectCannedAclOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutObjectCannedAcl", varargs...)
	ret0, _ := ret[0].(*s3.PutObjectCannedAclOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObjectCannedAcl indicates an expected call of PutObjectCannedAcl.
func (mr *MockObjectStorageServiceClientMockRecorder) PutObjectCannedAcl(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObjectCannedAcl", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).PutObjectCannedAcl), varargs...)
}

// PutObjectTagging mocks base method.
func (m *MockObjectStorageServiceClient) PutObjectTagging(ctx context.Context, in *s3.PutObjectTaggingInput, opts ...grpc.CallOption) (*s3.PutObjectTaggingOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutObjectTagging", varargs...)
	ret0, _ := ret[0].(*s3.PutObjectTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObjectTagging indicates an expected call of PutObjectTagging.
func (mr *MockObjectStorageServiceClientMockRecorder) PutObjectTagging(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObjectTagging", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).PutObjectTagging), varargs...)
}

// RestoreObject mocks base method.
func (m *MockObjectStorageServiceClient) RestoreObject(ctx context.Context, in *s3.RestoreObjectInput, opts ...grpc.CallOption) (*s3.RestoreObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestoreObject", varargs...)
	ret0, _ := ret[0].(*s3.RestoreObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreObject indicates an expected call of RestoreObject.
func (mr *MockObjectStorageServiceClientMockRecorder) RestoreObject(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreObject", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).RestoreObject), varargs...)
}

// SignURL mocks base method.
func (m *MockObjectStorageServiceClient) SignURL(ctx context.Context, in *s3.SignURLInput, opts ...grpc.CallOption) (*s3.SignURLOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignURL", varargs...)
	ret0, _ := ret[0].(*s3.SignURLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignURL indicates an expected call of SignURL.
func (mr *MockObjectStorageServiceClientMockRecorder) SignURL(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignURL", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).SignURL), varargs...)
}

// UpdateDownloadBandwidthRateLimit mocks base method.
func (m *MockObjectStorageServiceClient) UpdateDownloadBandwidthRateLimit(ctx context.Context, in *s3.UpdateBandwidthRateLimitInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDownloadBandwidthRateLimit", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDownloadBandwidthRateLimit indicates an expected call of UpdateDownloadBandwidthRateLimit.
func (mr *MockObjectStorageServiceClientMockRecorder) UpdateDownloadBandwidthRateLimit(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDownloadBandwidthRateLimit", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).UpdateDownloadBandwidthRateLimit), varargs...)
}

// UpdateUploadBandwidthRateLimit mocks base method.
func (m *MockObjectStorageServiceClient) UpdateUploadBandwidthRateLimit(ctx context.Context, in *s3.UpdateBandwidthRateLimitInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUploadBandwidthRateLimit", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUploadBandwidthRateLimit indicates an expected call of UpdateUploadBandwidthRateLimit.
func (mr *MockObjectStorageServiceClientMockRecorder) UpdateUploadBandwidthRateLimit(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUploadBandwidthRateLimit", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).UpdateUploadBandwidthRateLimit), varargs...)
}

// UploadPart mocks base method.
func (m *MockObjectStorageServiceClient) UploadPart(ctx context.Context, opts ...grpc.CallOption) (s3.ObjectStorageService_UploadPartClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadPart", varargs...)
	ret0, _ := ret[0].(s3.ObjectStorageService_UploadPartClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPart indicates an expected call of UploadPart.
func (mr *MockObjectStorageServiceClientMockRecorder) UploadPart(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPart", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).UploadPart), varargs...)
}

// UploadPartCopy mocks base method.
func (m *MockObjectStorageServiceClient) UploadPartCopy(ctx context.Context, in *s3.UploadPartCopyInput, opts ...grpc.CallOption) (*s3.UploadPartCopyOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadPartCopy", varargs...)
	ret0, _ := ret[0].(*s3.UploadPartCopyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPartCopy indicates an expected call of UploadPartCopy.
func (mr *MockObjectStorageServiceClientMockRecorder) UploadPartCopy(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPartCopy", reflect.TypeOf((*MockObjectStorageServiceClient)(nil).UploadPartCopy), varargs...)
}

// MockObjectStorageService_PutObjectClient is a mock of ObjectStorageService_PutObjectClient interface.
type MockObjectStorageService_PutObjectClient struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStorageService_PutObjectClientMockRecorder
}

// MockObjectStorageService_PutObjectClientMockRecorder is the mock recorder for MockObjectStorageService_PutObjectClient.
type MockObjectStorageService_PutObjectClientMockRecorder struct {
	mock *MockObjectStorageService_PutObjectClient
}

// NewMockObjectStorageService_PutObjectClient creates a new mock instance.
func NewMockObjectStorageService_PutObjectClient(ctrl *gomock.Controller) *MockObjectStorageService_PutObjectClient {
	mock := &MockObjectStorageService_PutObjectClient{ctrl: ctrl}
	mock.recorder = &MockObjectStorageService_PutObjectClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStorageService_PutObjectClient) EXPECT() *MockObjectStorageService_PutObjectClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockObjectStorageService_PutObjectClient) CloseAndRecv() (*s3.PutObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*s3.PutObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockObjectStorageService_PutObjectClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockObjectStorageService_PutObjectClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockObjectStorageService_PutObjectClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockObjectStorageService_PutObjectClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockObjectStorageService_PutObjectClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockObjectStorageService_PutObjectClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockObjectStorageService_PutObjectClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockObjectStorageService_PutObjectClient)(nil).Context))
}

// Header mocks base method.
func (m *MockObjectStorageService_PutObjectClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockObjectStorageService_PutObjectClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockObjectStorageService_PutObjectClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockObjectStorageService_PutObjectClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockObjectStorageService_PutObjectClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockObjectStorageService_PutObjectClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockObjectStorageService_PutObjectClient) Send(arg0 *s3.PutObjectInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockObjectStorageService_PutObjectClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockObjectStorageService_PutObjectClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockObjectStorageService_PutObjectClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockObjectStorageService_PutObjectClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockObjectStorageService_PutObjectClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockObjectStorageService_PutObjectClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockObjectStorageService_PutObjectClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockObjectStorageService_PutObjectClient)(nil).Trailer))
}

// MockObjectStorageService_GetObjectClient is a mock of ObjectStorageService_GetObjectClient interface.
type MockObjectStorageService_GetObjectClient struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStorageService_GetObjectClientMockRecorder
}

// MockObjectStorageService_GetObjectClientMockRecorder is the mock recorder for MockObjectStorageService_GetObjectClient.
type MockObjectStorageService_GetObjectClientMockRecorder struct {
	mock *MockObjectStorageService_GetObjectClient
}

// NewMockObjectStorageService_GetObjectClient creates a new mock instance.
func NewMockObjectStorageService_GetObjectClient(ctrl *gomock.Controller) *MockObjectStorageService_GetObjectClient {
	mock := &MockObjectStorageService_GetObjectClient{ctrl: ctrl}
	mock.recorder = &MockObjectStorageService_GetObjectClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStorageService_GetObjectClient) EXPECT() *MockObjectStorageService_GetObjectClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockObjectStorageService_GetObjectClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockObjectStorageService_GetObjectClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockObjectStorageService_GetObjectClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockObjectStorageService_GetObjectClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockObjectStorageService_GetObjectClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockObjectStorageService_GetObjectClient)(nil).Context))
}

// Header mocks base method.
func (m *MockObjectStorageService_GetObjectClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockObjectStorageService_GetObjectClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockObjectStorageService_GetObjectClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockObjectStorageService_GetObjectClient) Recv() (*s3.GetObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*s3.GetObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockObjectStorageService_GetObjectClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockObjectStorageService_GetObjectClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockObjectStorageService_GetObjectClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockObjectStorageService_GetObjectClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockObjectStorageService_GetObjectClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockObjectStorageService_GetObjectClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockObjectStorageService_GetObjectClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockObjectStorageService_GetObjectClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockObjectStorageService_GetObjectClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockObjectStorageService_GetObjectClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockObjectStorageService_GetObjectClient)(nil).Trailer))
}

// MockObjectStorageService_UploadPartClient is a mock of ObjectStorageService_UploadPartClient interface.
type MockObjectStorageService_UploadPartClient struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStorageService_UploadPartClientMockRecorder
}

// MockObjectStorageService_UploadPartClientMockRecorder is the mock recorder for MockObjectStorageService_UploadPartClient.
type MockObjectStorageService_UploadPartClientMockRecorder struct {
	mock *MockObjectStorageService_UploadPartClient
}

// NewMockObjectStorageService_UploadPartClient creates a new mock instance.
func NewMockObjectStorageService_UploadPartClient(ctrl *gomock.Controller) *MockObjectStorageService_UploadPartClient {
	mock := &MockObjectStorageService_UploadPartClient{ctrl: ctrl}
	mock.recorder = &MockObjectStorageService_UploadPartClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStorageService_UploadPartClient) EXPECT() *MockObjectStorageService_UploadPartClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockObjectStorageService_UploadPartClient) CloseAndRecv() (*s3.UploadPartOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*s3.UploadPartOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockObjectStorageService_UploadPartClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockObjectStorageService_UploadPartClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockObjectStorageService_UploadPartClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockObjectStorageService_UploadPartClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockObjectStorageService_UploadPartClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockObjectStorageService_UploadPartClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockObjectStorageService_UploadPartClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockObjectStorageService_UploadPartClient)(nil).Context))
}

// Header mocks base method.
func (m *MockObjectStorageService_UploadPartClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockObjectStorageService_UploadPartClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockObjectStorageService_UploadPartClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockObjectStorageService_UploadPartClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockObjectStorageService_UploadPartClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockObjectStorageService_UploadPartClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockObjectStorageService_UploadPartClient) Send(arg0 *s3.UploadPartInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockObjectStorageService_UploadPartClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockObjectStorageService_UploadPartClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockObjectStorageService_UploadPartClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockObjectStorageService_UploadPartClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockObjectStorageService_UploadPartClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockObjectStorageService_UploadPartClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockObjectStorageService_UploadPartClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockObjectStorageService_UploadPartClient)(nil).Trailer))
}

// MockObjectStorageService_AppendObjectClient is a mock of ObjectStorageService_AppendObjectClient interface.
type MockObjectStorageService_AppendObjectClient struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStorageService_AppendObjectClientMockRecorder
}

// MockObjectStorageService_AppendObjectClientMockRecorder is the mock recorder for MockObjectStorageService_AppendObjectClient.
type MockObjectStorageService_AppendObjectClientMockRecorder struct {
	mock *MockObjectStorageService_AppendObjectClient
}

// NewMockObjectStorageService_AppendObjectClient creates a new mock instance.
func NewMockObjectStorageService_AppendObjectClient(ctrl *gomock.Controller) *MockObjectStorageService_AppendObjectClient {
	mock := &MockObjectStorageService_AppendObjectClient{ctrl: ctrl}
	mock.recorder = &MockObjectStorageService_AppendObjectClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStorageService_AppendObjectClient) EXPECT() *MockObjectStorageService_AppendObjectClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockObjectStorageService_AppendObjectClient) CloseAndRecv() (*s3.AppendObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*s3.AppendObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockObjectStorageService_AppendObjectClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockObjectStorageService_AppendObjectClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockObjectStorageService_AppendObjectClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockObjectStorageService_AppendObjectClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockObjectStorageService_AppendObjectClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockObjectStorageService_AppendObjectClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockObjectStorageService_AppendObjectClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockObjectStorageService_AppendObjectClient)(nil).Context))
}

// Header mocks base method.
func (m *MockObjectStorageService_AppendObjectClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockObjectStorageService_AppendObjectClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockObjectStorageService_AppendObjectClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockObjectStorageService_AppendObjectClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockObjectStorageService_AppendObjectClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockObjectStorageService_AppendObjectClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockObjectStorageService_AppendObjectClient) Send(arg0 *s3.AppendObjectInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockObjectStorageService_AppendObjectClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockObjectStorageService_AppendObjectClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockObjectStorageService_AppendObjectClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockObjectStorageService_AppendObjectClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockObjectStorageService_AppendObjectClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockObjectStorageService_AppendObjectClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockObjectStorageService_AppendObjectClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockObjectStorageService_AppendObjectClient)(nil).Trailer))
}

// MockObjectStorageServiceServer is a mock of ObjectStorageServiceServer interface.
type MockObjectStorageServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStorageServiceServerMockRecorder
}

// MockObjectStorageServiceServerMockRecorder is the mock recorder for MockObjectStorageServiceServer.
type MockObjectStorageServiceServerMockRecorder struct {
	mock *MockObjectStorageServiceServer
}

// NewMockObjectStorageServiceServer creates a new mock instance.
func NewMockObjectStorageServiceServer(ctrl *gomock.Controller) *MockObjectStorageServiceServer {
	mock := &MockObjectStorageServiceServer{ctrl: ctrl}
	mock.recorder = &MockObjectStorageServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStorageServiceServer) EXPECT() *MockObjectStorageServiceServerMockRecorder {
	return m.recorder
}

// AbortMultipartUpload mocks base method.
func (m *MockObjectStorageServiceServer) AbortMultipartUpload(arg0 context.Context, arg1 *s3.AbortMultipartUploadInput) (*s3.AbortMultipartUploadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortMultipartUpload", arg0, arg1)
	ret0, _ := ret[0].(*s3.AbortMultipartUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AbortMultipartUpload indicates an expected call of AbortMultipartUpload.
func (mr *MockObjectStorageServiceServerMockRecorder) AbortMultipartUpload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortMultipartUpload", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).AbortMultipartUpload), arg0, arg1)
}

// AppendObject mocks base method.
func (m *MockObjectStorageServiceServer) AppendObject(arg0 s3.ObjectStorageService_AppendObjectServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendObject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendObject indicates an expected call of AppendObject.
func (mr *MockObjectStorageServiceServerMockRecorder) AppendObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendObject", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).AppendObject), arg0)
}

// CompleteMultipartUpload mocks base method.
func (m *MockObjectStorageServiceServer) CompleteMultipartUpload(arg0 context.Context, arg1 *s3.CompleteMultipartUploadInput) (*s3.CompleteMultipartUploadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteMultipartUpload", arg0, arg1)
	ret0, _ := ret[0].(*s3.CompleteMultipartUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteMultipartUpload indicates an expected call of CompleteMultipartUpload.
func (mr *MockObjectStorageServiceServerMockRecorder) CompleteMultipartUpload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteMultipartUpload", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).CompleteMultipartUpload), arg0, arg1)
}

// CopyObject mocks base method.
func (m *MockObjectStorageServiceServer) CopyObject(arg0 context.Context, arg1 *s3.CopyObjectInput) (*s3.CopyObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyObject", arg0, arg1)
	ret0, _ := ret[0].(*s3.CopyObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyObject indicates an expected call of CopyObject.
func (mr *MockObjectStorageServiceServerMockRecorder) CopyObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyObject", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).CopyObject), arg0, arg1)
}

// CreateMultipartUpload mocks base method.
func (m *MockObjectStorageServiceServer) CreateMultipartUpload(arg0 context.Context, arg1 *s3.CreateMultipartUploadInput) (*s3.CreateMultipartUploadOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultipartUpload", arg0, arg1)
	ret0, _ := ret[0].(*s3.CreateMultipartUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMultipartUpload indicates an expected call of CreateMultipartUpload.
func (mr *MockObjectStorageServiceServerMockRecorder) CreateMultipartUpload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultipartUpload", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).CreateMultipartUpload), arg0, arg1)
}

// DeleteObject mocks base method.
func (m *MockObjectStorageServiceServer) DeleteObject(arg0 context.Context, arg1 *s3.DeleteObjectInput) (*s3.DeleteObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", arg0, arg1)
	ret0, _ := ret[0].(*s3.DeleteObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockObjectStorageServiceServerMockRecorder) DeleteObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).DeleteObject), arg0, arg1)
}

// DeleteObjectTagging mocks base method.
func (m *MockObjectStorageServiceServer) DeleteObjectTagging(arg0 context.Context, arg1 *s3.DeleteObjectTaggingInput) (*s3.DeleteObjectTaggingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjectTagging", arg0, arg1)
	ret0, _ := ret[0].(*s3.DeleteObjectTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObjectTagging indicates an expected call of DeleteObjectTagging.
func (mr *MockObjectStorageServiceServerMockRecorder) DeleteObjectTagging(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjectTagging", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).DeleteObjectTagging), arg0, arg1)
}

// DeleteObjects mocks base method.
func (m *MockObjectStorageServiceServer) DeleteObjects(arg0 context.Context, arg1 *s3.DeleteObjectsInput) (*s3.DeleteObjectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObjects", arg0, arg1)
	ret0, _ := ret[0].(*s3.DeleteObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObjects indicates an expected call of DeleteObjects.
func (mr *MockObjectStorageServiceServerMockRecorder) DeleteObjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjects", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).DeleteObjects), arg0, arg1)
}

// GetObject mocks base method.
func (m *MockObjectStorageServiceServer) GetObject(arg0 *s3.GetObjectInput, arg1 s3.ObjectStorageService_GetObjectServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetObject indicates an expected call of GetObject.
func (mr *MockObjectStorageServiceServerMockRecorder) GetObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).GetObject), arg0, arg1)
}

// GetObjectCannedAcl mocks base method.
func (m *MockObjectStorageServiceServer) GetObjectCannedAcl(arg0 context.Context, arg1 *s3.GetObjectCannedAclInput) (*s3.GetObjectCannedAclOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectCannedAcl", arg0, arg1)
	ret0, _ := ret[0].(*s3.GetObjectCannedAclOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectCannedAcl indicates an expected call of GetObjectCannedAcl.
func (mr *MockObjectStorageServiceServerMockRecorder) GetObjectCannedAcl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectCannedAcl", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).GetObjectCannedAcl), arg0, arg1)
}

// GetObjectTagging mocks base method.
func (m *MockObjectStorageServiceServer) GetObjectTagging(arg0 context.Context, arg1 *s3.GetObjectTaggingInput) (*s3.GetObjectTaggingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectTagging", arg0, arg1)
	ret0, _ := ret[0].(*s3.GetObjectTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectTagging indicates an expected call of GetObjectTagging.
func (mr *MockObjectStorageServiceServerMockRecorder) GetObjectTagging(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectTagging", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).GetObjectTagging), arg0, arg1)
}

// HeadObject mocks base method.
func (m *MockObjectStorageServiceServer) HeadObject(arg0 context.Context, arg1 *s3.HeadObjectInput) (*s3.HeadObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadObject", arg0, arg1)
	ret0, _ := ret[0].(*s3.HeadObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadObject indicates an expected call of HeadObject.
func (mr *MockObjectStorageServiceServerMockRecorder) HeadObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadObject", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).HeadObject), arg0, arg1)
}

// IsObjectExist mocks base method.
func (m *MockObjectStorageServiceServer) IsObjectExist(arg0 context.Context, arg1 *s3.IsObjectExistInput) (*s3.IsObjectExistOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsObjectExist", arg0, arg1)
	ret0, _ := ret[0].(*s3.IsObjectExistOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsObjectExist indicates an expected call of IsObjectExist.
func (mr *MockObjectStorageServiceServerMockRecorder) IsObjectExist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsObjectExist", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).IsObjectExist), arg0, arg1)
}

// ListMultipartUploads mocks base method.
func (m *MockObjectStorageServiceServer) ListMultipartUploads(arg0 context.Context, arg1 *s3.ListMultipartUploadsInput) (*s3.ListMultipartUploadsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMultipartUploads", arg0, arg1)
	ret0, _ := ret[0].(*s3.ListMultipartUploadsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMultipartUploads indicates an expected call of ListMultipartUploads.
func (mr *MockObjectStorageServiceServerMockRecorder) ListMultipartUploads(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMultipartUploads", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).ListMultipartUploads), arg0, arg1)
}

// ListObjectVersions mocks base method.
func (m *MockObjectStorageServiceServer) ListObjectVersions(arg0 context.Context, arg1 *s3.ListObjectVersionsInput) (*s3.ListObjectVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectVersions", arg0, arg1)
	ret0, _ := ret[0].(*s3.ListObjectVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectVersions indicates an expected call of ListObjectVersions.
func (mr *MockObjectStorageServiceServerMockRecorder) ListObjectVersions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectVersions", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).ListObjectVersions), arg0, arg1)
}

// ListObjects mocks base method.
func (m *MockObjectStorageServiceServer) ListObjects(arg0 context.Context, arg1 *s3.ListObjectsInput) (*s3.ListObjectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjects", arg0, arg1)
	ret0, _ := ret[0].(*s3.ListObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjects indicates an expected call of ListObjects.
func (mr *MockObjectStorageServiceServerMockRecorder) ListObjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjects", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).ListObjects), arg0, arg1)
}

// ListParts mocks base method.
func (m *MockObjectStorageServiceServer) ListParts(arg0 context.Context, arg1 *s3.ListPartsInput) (*s3.ListPartsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListParts", arg0, arg1)
	ret0, _ := ret[0].(*s3.ListPartsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListParts indicates an expected call of ListParts.
func (mr *MockObjectStorageServiceServerMockRecorder) ListParts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParts", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).ListParts), arg0, arg1)
}

// PutObject mocks base method.
func (m *MockObjectStorageServiceServer) PutObject(arg0 s3.ObjectStorageService_PutObjectServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutObject indicates an expected call of PutObject.
func (mr *MockObjectStorageServiceServerMockRecorder) PutObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).PutObject), arg0)
}

// PutObjectCannedAcl mocks base method.
func (m *MockObjectStorageServiceServer) PutObjectCannedAcl(arg0 context.Context, arg1 *s3.PutObjectCannedAclInput) (*s3.PutObjectCannedAclOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObjectCannedAcl", arg0, arg1)
	ret0, _ := ret[0].(*s3.PutObjectCannedAclOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObjectCannedAcl indicates an expected call of PutObjectCannedAcl.
func (mr *MockObjectStorageServiceServerMockRecorder) PutObjectCannedAcl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObjectCannedAcl", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).PutObjectCannedAcl), arg0, arg1)
}

// PutObjectTagging mocks base method.
func (m *MockObjectStorageServiceServer) PutObjectTagging(arg0 context.Context, arg1 *s3.PutObjectTaggingInput) (*s3.PutObjectTaggingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObjectTagging", arg0, arg1)
	ret0, _ := ret[0].(*s3.PutObjectTaggingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObjectTagging indicates an expected call of PutObjectTagging.
func (mr *MockObjectStorageServiceServerMockRecorder) PutObjectTagging(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObjectTagging", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).PutObjectTagging), arg0, arg1)
}

// RestoreObject mocks base method.
func (m *MockObjectStorageServiceServer) RestoreObject(arg0 context.Context, arg1 *s3.RestoreObjectInput) (*s3.RestoreObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreObject", arg0, arg1)
	ret0, _ := ret[0].(*s3.RestoreObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestoreObject indicates an expected call of RestoreObject.
func (mr *MockObjectStorageServiceServerMockRecorder) RestoreObject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreObject", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).RestoreObject), arg0, arg1)
}

// SignURL mocks base method.
func (m *MockObjectStorageServiceServer) SignURL(arg0 context.Context, arg1 *s3.SignURLInput) (*s3.SignURLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignURL", arg0, arg1)
	ret0, _ := ret[0].(*s3.SignURLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignURL indicates an expected call of SignURL.
func (mr *MockObjectStorageServiceServerMockRecorder) SignURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignURL", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).SignURL), arg0, arg1)
}

// UpdateDownloadBandwidthRateLimit mocks base method.
func (m *MockObjectStorageServiceServer) UpdateDownloadBandwidthRateLimit(arg0 context.Context, arg1 *s3.UpdateBandwidthRateLimitInput) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDownloadBandwidthRateLimit", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDownloadBandwidthRateLimit indicates an expected call of UpdateDownloadBandwidthRateLimit.
func (mr *MockObjectStorageServiceServerMockRecorder) UpdateDownloadBandwidthRateLimit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDownloadBandwidthRateLimit", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).UpdateDownloadBandwidthRateLimit), arg0, arg1)
}

// UpdateUploadBandwidthRateLimit mocks base method.
func (m *MockObjectStorageServiceServer) UpdateUploadBandwidthRateLimit(arg0 context.Context, arg1 *s3.UpdateBandwidthRateLimitInput) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUploadBandwidthRateLimit", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUploadBandwidthRateLimit indicates an expected call of UpdateUploadBandwidthRateLimit.
func (mr *MockObjectStorageServiceServerMockRecorder) UpdateUploadBandwidthRateLimit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUploadBandwidthRateLimit", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).UpdateUploadBandwidthRateLimit), arg0, arg1)
}

// UploadPart mocks base method.
func (m *MockObjectStorageServiceServer) UploadPart(arg0 s3.ObjectStorageService_UploadPartServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPart", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadPart indicates an expected call of UploadPart.
func (mr *MockObjectStorageServiceServerMockRecorder) UploadPart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPart", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).UploadPart), arg0)
}

// UploadPartCopy mocks base method.
func (m *MockObjectStorageServiceServer) UploadPartCopy(arg0 context.Context, arg1 *s3.UploadPartCopyInput) (*s3.UploadPartCopyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPartCopy", arg0, arg1)
	ret0, _ := ret[0].(*s3.UploadPartCopyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPartCopy indicates an expected call of UploadPartCopy.
func (mr *MockObjectStorageServiceServerMockRecorder) UploadPartCopy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPartCopy", reflect.TypeOf((*MockObjectStorageServiceServer)(nil).UploadPartCopy), arg0, arg1)
}

// MockUnsafeObjectStorageServiceServer is a mock of UnsafeObjectStorageServiceServer interface.
type MockUnsafeObjectStorageServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeObjectStorageServiceServerMockRecorder
}

// MockUnsafeObjectStorageServiceServerMockRecorder is the mock recorder for MockUnsafeObjectStorageServiceServer.
type MockUnsafeObjectStorageServiceServerMockRecorder struct {
	mock *MockUnsafeObjectStorageServiceServer
}

// NewMockUnsafeObjectStorageServiceServer creates a new mock instance.
func NewMockUnsafeObjectStorageServiceServer(ctrl *gomock.Controller) *MockUnsafeObjectStorageServiceServer {
	mock := &MockUnsafeObjectStorageServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeObjectStorageServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeObjectStorageServiceServer) EXPECT() *MockUnsafeObjectStorageServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedObjectStorageServiceServer mocks base method.
func (m *MockUnsafeObjectStorageServiceServer) mustEmbedUnimplementedObjectStorageServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedObjectStorageServiceServer")
}

// mustEmbedUnimplementedObjectStorageServiceServer indicates an expected call of mustEmbedUnimplementedObjectStorageServiceServer.
func (mr *MockUnsafeObjectStorageServiceServerMockRecorder) mustEmbedUnimplementedObjectStorageServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedObjectStorageServiceServer", reflect.TypeOf((*MockUnsafeObjectStorageServiceServer)(nil).mustEmbedUnimplementedObjectStorageServiceServer))
}

// MockObjectStorageService_PutObjectServer is a mock of ObjectStorageService_PutObjectServer interface.
type MockObjectStorageService_PutObjectServer struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStorageService_PutObjectServerMockRecorder
}

// MockObjectStorageService_PutObjectServerMockRecorder is the mock recorder for MockObjectStorageService_PutObjectServer.
type MockObjectStorageService_PutObjectServerMockRecorder struct {
	mock *MockObjectStorageService_PutObjectServer
}

// NewMockObjectStorageService_PutObjectServer creates a new mock instance.
func NewMockObjectStorageService_PutObjectServer(ctrl *gomock.Controller) *MockObjectStorageService_PutObjectServer {
	mock := &MockObjectStorageService_PutObjectServer{ctrl: ctrl}
	mock.recorder = &MockObjectStorageService_PutObjectServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStorageService_PutObjectServer) EXPECT() *MockObjectStorageService_PutObjectServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockObjectStorageService_PutObjectServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockObjectStorageService_PutObjectServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockObjectStorageService_PutObjectServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockObjectStorageService_PutObjectServer) Recv() (*s3.PutObjectInput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*s3.PutObjectInput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockObjectStorageService_PutObjectServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockObjectStorageService_PutObjectServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockObjectStorageService_PutObjectServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockObjectStorageService_PutObjectServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockObjectStorageService_PutObjectServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockObjectStorageService_PutObjectServer) SendAndClose(arg0 *s3.PutObjectOutput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockObjectStorageService_PutObjectServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockObjectStorageService_PutObjectServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockObjectStorageService_PutObjectServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockObjectStorageService_PutObjectServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockObjectStorageService_PutObjectServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockObjectStorageService_PutObjectServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockObjectStorageService_PutObjectServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockObjectStorageService_PutObjectServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockObjectStorageService_PutObjectServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockObjectStorageService_PutObjectServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockObjectStorageService_PutObjectServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockObjectStorageService_PutObjectServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockObjectStorageService_PutObjectServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockObjectStorageService_PutObjectServer)(nil).SetTrailer), arg0)
}

// MockObjectStorageService_GetObjectServer is a mock of ObjectStorageService_GetObjectServer interface.
type MockObjectStorageService_GetObjectServer struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStorageService_GetObjectServerMockRecorder
}

// MockObjectStorageService_GetObjectServerMockRecorder is the mock recorder for MockObjectStorageService_GetObjectServer.
type MockObjectStorageService_GetObjectServerMockRecorder struct {
	mock *MockObjectStorageService_GetObjectServer
}

// NewMockObjectStorageService_GetObjectServer creates a new mock instance.
func NewMockObjectStorageService_GetObjectServer(ctrl *gomock.Controller) *MockObjectStorageService_GetObjectServer {
	mock := &MockObjectStorageService_GetObjectServer{ctrl: ctrl}
	mock.recorder = &MockObjectStorageService_GetObjectServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStorageService_GetObjectServer) EXPECT() *MockObjectStorageService_GetObjectServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockObjectStorageService_GetObjectServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockObjectStorageService_GetObjectServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockObjectStorageService_GetObjectServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockObjectStorageService_GetObjectServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockObjectStorageService_GetObjectServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockObjectStorageService_GetObjectServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockObjectStorageService_GetObjectServer) Send(arg0 *s3.GetObjectOutput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockObjectStorageService_GetObjectServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockObjectStorageService_GetObjectServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockObjectStorageService_GetObjectServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockObjectStorageService_GetObjectServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockObjectStorageService_GetObjectServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockObjectStorageService_GetObjectServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockObjectStorageService_GetObjectServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockObjectStorageService_GetObjectServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockObjectStorageService_GetObjectServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockObjectStorageService_GetObjectServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockObjectStorageService_GetObjectServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockObjectStorageService_GetObjectServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockObjectStorageService_GetObjectServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockObjectStorageService_GetObjectServer)(nil).SetTrailer), arg0)
}

// MockObjectStorageService_UploadPartServer is a mock of ObjectStorageService_UploadPartServer interface.
type MockObjectStorageService_UploadPartServer struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStorageService_UploadPartServerMockRecorder
}

// MockObjectStorageService_UploadPartServerMockRecorder is the mock recorder for MockObjectStorageService_UploadPartServer.
type MockObjectStorageService_UploadPartServerMockRecorder struct {
	mock *MockObjectStorageService_UploadPartServer
}

// NewMockObjectStorageService_UploadPartServer creates a new mock instance.
func NewMockObjectStorageService_UploadPartServer(ctrl *gomock.Controller) *MockObjectStorageService_UploadPartServer {
	mock := &MockObjectStorageService_UploadPartServer{ctrl: ctrl}
	mock.recorder = &MockObjectStorageService_UploadPartServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStorageService_UploadPartServer) EXPECT() *MockObjectStorageService_UploadPartServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockObjectStorageService_UploadPartServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockObjectStorageService_UploadPartServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockObjectStorageService_UploadPartServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockObjectStorageService_UploadPartServer) Recv() (*s3.UploadPartInput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*s3.UploadPartInput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockObjectStorageService_UploadPartServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockObjectStorageService_UploadPartServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockObjectStorageService_UploadPartServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockObjectStorageService_UploadPartServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockObjectStorageService_UploadPartServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockObjectStorageService_UploadPartServer) SendAndClose(arg0 *s3.UploadPartOutput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockObjectStorageService_UploadPartServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockObjectStorageService_UploadPartServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockObjectStorageService_UploadPartServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockObjectStorageService_UploadPartServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockObjectStorageService_UploadPartServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockObjectStorageService_UploadPartServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockObjectStorageService_UploadPartServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockObjectStorageService_UploadPartServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockObjectStorageService_UploadPartServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockObjectStorageService_UploadPartServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockObjectStorageService_UploadPartServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockObjectStorageService_UploadPartServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockObjectStorageService_UploadPartServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockObjectStorageService_UploadPartServer)(nil).SetTrailer), arg0)
}

// MockObjectStorageService_AppendObjectServer is a mock of ObjectStorageService_AppendObjectServer interface.
type MockObjectStorageService_AppendObjectServer struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStorageService_AppendObjectServerMockRecorder
}

// MockObjectStorageService_AppendObjectServerMockRecorder is the mock recorder for MockObjectStorageService_AppendObjectServer.
type MockObjectStorageService_AppendObjectServerMockRecorder struct {
	mock *MockObjectStorageService_AppendObjectServer
}

// NewMockObjectStorageService_AppendObjectServer creates a new mock instance.
func NewMockObjectStorageService_AppendObjectServer(ctrl *gomock.Controller) *MockObjectStorageService_AppendObjectServer {
	mock := &MockObjectStorageService_AppendObjectServer{ctrl: ctrl}
	mock.recorder = &MockObjectStorageService_AppendObjectServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStorageService_AppendObjectServer) EXPECT() *MockObjectStorageService_AppendObjectServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockObjectStorageService_AppendObjectServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockObjectStorageService_AppendObjectServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockObjectStorageService_AppendObjectServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockObjectStorageService_AppendObjectServer) Recv() (*s3.AppendObjectInput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*s3.AppendObjectInput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockObjectStorageService_AppendObjectServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockObjectStorageService_AppendObjectServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockObjectStorageService_AppendObjectServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockObjectStorageService_AppendObjectServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockObjectStorageService_AppendObjectServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockObjectStorageService_AppendObjectServer) SendAndClose(arg0 *s3.AppendObjectOutput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockObjectStorageService_AppendObjectServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockObjectStorageService_AppendObjectServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockObjectStorageService_AppendObjectServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockObjectStorageService_AppendObjectServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockObjectStorageService_AppendObjectServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockObjectStorageService_AppendObjectServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockObjectStorageService_AppendObjectServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockObjectStorageService_AppendObjectServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockObjectStorageService_AppendObjectServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockObjectStorageService_AppendObjectServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockObjectStorageService_AppendObjectServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockObjectStorageService_AppendObjectServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockObjectStorageService_AppendObjectServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockObjectStorageService_AppendObjectServer)(nil).SetTrailer), arg0)
}
