// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: oss.proto

package s3

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ObjectStorageServiceClient is the client API for ObjectStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectStorageServiceClient interface {
	//Object CRUD API
	//Adds an object to a bucket.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html
	PutObject(ctx context.Context, opts ...grpc.CallOption) (ObjectStorageService_PutObjectClient, error)
	//Retrieves objects.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html
	GetObject(ctx context.Context, in *GetObjectInput, opts ...grpc.CallOption) (ObjectStorageService_GetObjectClient, error)
	//Delete objects.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteObject.html
	DeleteObject(ctx context.Context, in *DeleteObjectInput, opts ...grpc.CallOption) (*DeleteObjectOutput, error)
	//Creates a copy of an object that is already stored in oss server.
	//Refer https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/API/API_CopyObject.html
	CopyObject(ctx context.Context, in *CopyObjectInput, opts ...grpc.CallOption) (*CopyObjectOutput, error)
	//Delete multiple objects from a bucket.
	//Refer https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/API/API_DeleteObjects.html
	DeleteObjects(ctx context.Context, in *DeleteObjectsInput, opts ...grpc.CallOption) (*DeleteObjectsOutput, error)
	//Returns some or all (up to 1,000) of the objects in a bucket.
	//Refer https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/API/API_ListObjects.html
	ListObjects(ctx context.Context, in *ListObjectsInput, opts ...grpc.CallOption) (*ListObjectsOutput, error)
	//The HEAD action retrieves metadata from an object without returning the object itself.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_HeadObject.html
	HeadObject(ctx context.Context, in *HeadObjectInput, opts ...grpc.CallOption) (*HeadObjectOutput, error)
	//This action used to check if the file exists.
	IsObjectExist(ctx context.Context, in *IsObjectExistInput, opts ...grpc.CallOption) (*IsObjectExistOutput, error)
	//Object Tagging API
	//Sets the supplied tag-set to an object that already exists in a bucket.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObjectTagging.html
	PutObjectTagging(ctx context.Context, in *PutObjectTaggingInput, opts ...grpc.CallOption) (*PutObjectTaggingOutput, error)
	//Removes the entire tag set from the specified object.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteObjectTagging.html
	DeleteObjectTagging(ctx context.Context, in *DeleteObjectTaggingInput, opts ...grpc.CallOption) (*DeleteObjectTaggingOutput, error)
	//Returns the tag-set of an object.
	//Refer https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/API/API_GetObjectTagging.html
	GetObjectTagging(ctx context.Context, in *GetObjectTaggingInput, opts ...grpc.CallOption) (*GetObjectTaggingOutput, error)
	//Returns object canned acl.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#CannedACL
	GetObjectCannedAcl(ctx context.Context, in *GetObjectCannedAclInput, opts ...grpc.CallOption) (*GetObjectCannedAclOutput, error)
	//Set object canned acl.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#CannedACL
	PutObjectCannedAcl(ctx context.Context, in *PutObjectCannedAclInput, opts ...grpc.CallOption) (*PutObjectCannedAclOutput, error)
	//Object Multipart Operation API
	//Initiates a multipart upload and returns an upload ID.
	//Refer https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/API/API_CreateMultipartUpload.html
	CreateMultipartUpload(ctx context.Context, in *CreateMultipartUploadInput, opts ...grpc.CallOption) (*CreateMultipartUploadOutput, error)
	//Uploads a part in a multipart upload.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html
	UploadPart(ctx context.Context, opts ...grpc.CallOption) (ObjectStorageService_UploadPartClient, error)
	//Uploads a part by copying data from an existing object as data source.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPartCopy.html
	UploadPartCopy(ctx context.Context, in *UploadPartCopyInput, opts ...grpc.CallOption) (*UploadPartCopyOutput, error)
	//Completes a multipart upload by assembling previously uploaded parts.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html
	CompleteMultipartUpload(ctx context.Context, in *CompleteMultipartUploadInput, opts ...grpc.CallOption) (*CompleteMultipartUploadOutput, error)
	//This action aborts a multipart upload.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html
	AbortMultipartUpload(ctx context.Context, in *AbortMultipartUploadInput, opts ...grpc.CallOption) (*AbortMultipartUploadOutput, error)
	//This action lists in-progress multipart uploads.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html
	ListMultipartUploads(ctx context.Context, in *ListMultipartUploadsInput, opts ...grpc.CallOption) (*ListMultipartUploadsOutput, error)
	//Lists the parts that have been uploaded for a specific multipart upload.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html
	ListParts(ctx context.Context, in *ListPartsInput, opts ...grpc.CallOption) (*ListPartsOutput, error)
	//Returns metadata about all versions of the objects in a bucket.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjectVersions.html
	ListObjectVersions(ctx context.Context, in *ListObjectVersionsInput, opts ...grpc.CallOption) (*ListObjectVersionsOutput, error)
	//A presigned URL gives you access to the object identified in the URL, provided that the creator of the presigned URL has permissions to access that object.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/userguide/PresignedUrlUploadObject.html
	SignURL(ctx context.Context, in *SignURLInput, opts ...grpc.CallOption) (*SignURLOutput, error)
	//This action used to set download bandwidth limit speed.
	//Refer https://github.com/aliyun/aliyun-oss-go-sdk/blob/master/oss/client.go#L2106
	UpdateDownloadBandwidthRateLimit(ctx context.Context, in *UpdateBandwidthRateLimitInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//This action used to set upload bandwidth limit speed.
	//Refer https://github.com/aliyun/aliyun-oss-go-sdk/blob/master/oss/client.go#L2096
	UpdateUploadBandwidthRateLimit(ctx context.Context, in *UpdateBandwidthRateLimitInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//This action is used to append object.
	//Refer https://help.aliyun.com/document_detail/31981.html or https://github.com/minio/minio-java/issues/980
	AppendObject(ctx context.Context, opts ...grpc.CallOption) (ObjectStorageService_AppendObjectClient, error)
	//Restores an archived copy of an object back.
	//Refer https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/API/API_RestoreObject.html
	RestoreObject(ctx context.Context, in *RestoreObjectInput, opts ...grpc.CallOption) (*RestoreObjectOutput, error)
}

type objectStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectStorageServiceClient(cc grpc.ClientConnInterface) ObjectStorageServiceClient {
	return &objectStorageServiceClient{cc}
}

func (c *objectStorageServiceClient) PutObject(ctx context.Context, opts ...grpc.CallOption) (ObjectStorageService_PutObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjectStorageService_ServiceDesc.Streams[0], "/spec.proto.extension.v1.s3.ObjectStorageService/PutObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectStorageServicePutObjectClient{stream}
	return x, nil
}

type ObjectStorageService_PutObjectClient interface {
	Send(*PutObjectInput) error
	CloseAndRecv() (*PutObjectOutput, error)
	grpc.ClientStream
}

type objectStorageServicePutObjectClient struct {
	grpc.ClientStream
}

func (x *objectStorageServicePutObjectClient) Send(m *PutObjectInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *objectStorageServicePutObjectClient) CloseAndRecv() (*PutObjectOutput, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PutObjectOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectStorageServiceClient) GetObject(ctx context.Context, in *GetObjectInput, opts ...grpc.CallOption) (ObjectStorageService_GetObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjectStorageService_ServiceDesc.Streams[1], "/spec.proto.extension.v1.s3.ObjectStorageService/GetObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectStorageServiceGetObjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjectStorageService_GetObjectClient interface {
	Recv() (*GetObjectOutput, error)
	grpc.ClientStream
}

type objectStorageServiceGetObjectClient struct {
	grpc.ClientStream
}

func (x *objectStorageServiceGetObjectClient) Recv() (*GetObjectOutput, error) {
	m := new(GetObjectOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectStorageServiceClient) DeleteObject(ctx context.Context, in *DeleteObjectInput, opts ...grpc.CallOption) (*DeleteObjectOutput, error) {
	out := new(DeleteObjectOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.s3.ObjectStorageService/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) CopyObject(ctx context.Context, in *CopyObjectInput, opts ...grpc.CallOption) (*CopyObjectOutput, error) {
	out := new(CopyObjectOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.s3.ObjectStorageService/CopyObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) DeleteObjects(ctx context.Context, in *DeleteObjectsInput, opts ...grpc.CallOption) (*DeleteObjectsOutput, error) {
	out := new(DeleteObjectsOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.s3.ObjectStorageService/DeleteObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) ListObjects(ctx context.Context, in *ListObjectsInput, opts ...grpc.CallOption) (*ListObjectsOutput, error) {
	out := new(ListObjectsOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.s3.ObjectStorageService/ListObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) HeadObject(ctx context.Context, in *HeadObjectInput, opts ...grpc.CallOption) (*HeadObjectOutput, error) {
	out := new(HeadObjectOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.s3.ObjectStorageService/HeadObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) IsObjectExist(ctx context.Context, in *IsObjectExistInput, opts ...grpc.CallOption) (*IsObjectExistOutput, error) {
	out := new(IsObjectExistOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.s3.ObjectStorageService/IsObjectExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) PutObjectTagging(ctx context.Context, in *PutObjectTaggingInput, opts ...grpc.CallOption) (*PutObjectTaggingOutput, error) {
	out := new(PutObjectTaggingOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.s3.ObjectStorageService/PutObjectTagging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) DeleteObjectTagging(ctx context.Context, in *DeleteObjectTaggingInput, opts ...grpc.CallOption) (*DeleteObjectTaggingOutput, error) {
	out := new(DeleteObjectTaggingOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.s3.ObjectStorageService/DeleteObjectTagging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) GetObjectTagging(ctx context.Context, in *GetObjectTaggingInput, opts ...grpc.CallOption) (*GetObjectTaggingOutput, error) {
	out := new(GetObjectTaggingOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.s3.ObjectStorageService/GetObjectTagging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) GetObjectCannedAcl(ctx context.Context, in *GetObjectCannedAclInput, opts ...grpc.CallOption) (*GetObjectCannedAclOutput, error) {
	out := new(GetObjectCannedAclOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.s3.ObjectStorageService/GetObjectCannedAcl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) PutObjectCannedAcl(ctx context.Context, in *PutObjectCannedAclInput, opts ...grpc.CallOption) (*PutObjectCannedAclOutput, error) {
	out := new(PutObjectCannedAclOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.s3.ObjectStorageService/PutObjectCannedAcl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) CreateMultipartUpload(ctx context.Context, in *CreateMultipartUploadInput, opts ...grpc.CallOption) (*CreateMultipartUploadOutput, error) {
	out := new(CreateMultipartUploadOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.s3.ObjectStorageService/CreateMultipartUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) UploadPart(ctx context.Context, opts ...grpc.CallOption) (ObjectStorageService_UploadPartClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjectStorageService_ServiceDesc.Streams[2], "/spec.proto.extension.v1.s3.ObjectStorageService/UploadPart", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectStorageServiceUploadPartClient{stream}
	return x, nil
}

type ObjectStorageService_UploadPartClient interface {
	Send(*UploadPartInput) error
	CloseAndRecv() (*UploadPartOutput, error)
	grpc.ClientStream
}

type objectStorageServiceUploadPartClient struct {
	grpc.ClientStream
}

func (x *objectStorageServiceUploadPartClient) Send(m *UploadPartInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *objectStorageServiceUploadPartClient) CloseAndRecv() (*UploadPartOutput, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadPartOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectStorageServiceClient) UploadPartCopy(ctx context.Context, in *UploadPartCopyInput, opts ...grpc.CallOption) (*UploadPartCopyOutput, error) {
	out := new(UploadPartCopyOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.s3.ObjectStorageService/UploadPartCopy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) CompleteMultipartUpload(ctx context.Context, in *CompleteMultipartUploadInput, opts ...grpc.CallOption) (*CompleteMultipartUploadOutput, error) {
	out := new(CompleteMultipartUploadOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.s3.ObjectStorageService/CompleteMultipartUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) AbortMultipartUpload(ctx context.Context, in *AbortMultipartUploadInput, opts ...grpc.CallOption) (*AbortMultipartUploadOutput, error) {
	out := new(AbortMultipartUploadOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.s3.ObjectStorageService/AbortMultipartUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) ListMultipartUploads(ctx context.Context, in *ListMultipartUploadsInput, opts ...grpc.CallOption) (*ListMultipartUploadsOutput, error) {
	out := new(ListMultipartUploadsOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.s3.ObjectStorageService/ListMultipartUploads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) ListParts(ctx context.Context, in *ListPartsInput, opts ...grpc.CallOption) (*ListPartsOutput, error) {
	out := new(ListPartsOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.s3.ObjectStorageService/ListParts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) ListObjectVersions(ctx context.Context, in *ListObjectVersionsInput, opts ...grpc.CallOption) (*ListObjectVersionsOutput, error) {
	out := new(ListObjectVersionsOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.s3.ObjectStorageService/ListObjectVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) SignURL(ctx context.Context, in *SignURLInput, opts ...grpc.CallOption) (*SignURLOutput, error) {
	out := new(SignURLOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.s3.ObjectStorageService/SignURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) UpdateDownloadBandwidthRateLimit(ctx context.Context, in *UpdateBandwidthRateLimitInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.s3.ObjectStorageService/UpdateDownloadBandwidthRateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) UpdateUploadBandwidthRateLimit(ctx context.Context, in *UpdateBandwidthRateLimitInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.s3.ObjectStorageService/UpdateUploadBandwidthRateLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectStorageServiceClient) AppendObject(ctx context.Context, opts ...grpc.CallOption) (ObjectStorageService_AppendObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjectStorageService_ServiceDesc.Streams[3], "/spec.proto.extension.v1.s3.ObjectStorageService/AppendObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectStorageServiceAppendObjectClient{stream}
	return x, nil
}

type ObjectStorageService_AppendObjectClient interface {
	Send(*AppendObjectInput) error
	CloseAndRecv() (*AppendObjectOutput, error)
	grpc.ClientStream
}

type objectStorageServiceAppendObjectClient struct {
	grpc.ClientStream
}

func (x *objectStorageServiceAppendObjectClient) Send(m *AppendObjectInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *objectStorageServiceAppendObjectClient) CloseAndRecv() (*AppendObjectOutput, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AppendObjectOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectStorageServiceClient) RestoreObject(ctx context.Context, in *RestoreObjectInput, opts ...grpc.CallOption) (*RestoreObjectOutput, error) {
	out := new(RestoreObjectOutput)
	err := c.cc.Invoke(ctx, "/spec.proto.extension.v1.s3.ObjectStorageService/RestoreObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectStorageServiceServer is the server API for ObjectStorageService service.
// All implementations should embed UnimplementedObjectStorageServiceServer
// for forward compatibility
type ObjectStorageServiceServer interface {
	//Object CRUD API
	//Adds an object to a bucket.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html
	PutObject(ObjectStorageService_PutObjectServer) error
	//Retrieves objects.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html
	GetObject(*GetObjectInput, ObjectStorageService_GetObjectServer) error
	//Delete objects.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteObject.html
	DeleteObject(context.Context, *DeleteObjectInput) (*DeleteObjectOutput, error)
	//Creates a copy of an object that is already stored in oss server.
	//Refer https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/API/API_CopyObject.html
	CopyObject(context.Context, *CopyObjectInput) (*CopyObjectOutput, error)
	//Delete multiple objects from a bucket.
	//Refer https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/API/API_DeleteObjects.html
	DeleteObjects(context.Context, *DeleteObjectsInput) (*DeleteObjectsOutput, error)
	//Returns some or all (up to 1,000) of the objects in a bucket.
	//Refer https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/API/API_ListObjects.html
	ListObjects(context.Context, *ListObjectsInput) (*ListObjectsOutput, error)
	//The HEAD action retrieves metadata from an object without returning the object itself.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_HeadObject.html
	HeadObject(context.Context, *HeadObjectInput) (*HeadObjectOutput, error)
	//This action used to check if the file exists.
	IsObjectExist(context.Context, *IsObjectExistInput) (*IsObjectExistOutput, error)
	//Object Tagging API
	//Sets the supplied tag-set to an object that already exists in a bucket.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObjectTagging.html
	PutObjectTagging(context.Context, *PutObjectTaggingInput) (*PutObjectTaggingOutput, error)
	//Removes the entire tag set from the specified object.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteObjectTagging.html
	DeleteObjectTagging(context.Context, *DeleteObjectTaggingInput) (*DeleteObjectTaggingOutput, error)
	//Returns the tag-set of an object.
	//Refer https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/API/API_GetObjectTagging.html
	GetObjectTagging(context.Context, *GetObjectTaggingInput) (*GetObjectTaggingOutput, error)
	//Returns object canned acl.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#CannedACL
	GetObjectCannedAcl(context.Context, *GetObjectCannedAclInput) (*GetObjectCannedAclOutput, error)
	//Set object canned acl.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#CannedACL
	PutObjectCannedAcl(context.Context, *PutObjectCannedAclInput) (*PutObjectCannedAclOutput, error)
	//Object Multipart Operation API
	//Initiates a multipart upload and returns an upload ID.
	//Refer https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/API/API_CreateMultipartUpload.html
	CreateMultipartUpload(context.Context, *CreateMultipartUploadInput) (*CreateMultipartUploadOutput, error)
	//Uploads a part in a multipart upload.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html
	UploadPart(ObjectStorageService_UploadPartServer) error
	//Uploads a part by copying data from an existing object as data source.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPartCopy.html
	UploadPartCopy(context.Context, *UploadPartCopyInput) (*UploadPartCopyOutput, error)
	//Completes a multipart upload by assembling previously uploaded parts.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html
	CompleteMultipartUpload(context.Context, *CompleteMultipartUploadInput) (*CompleteMultipartUploadOutput, error)
	//This action aborts a multipart upload.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html
	AbortMultipartUpload(context.Context, *AbortMultipartUploadInput) (*AbortMultipartUploadOutput, error)
	//This action lists in-progress multipart uploads.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html
	ListMultipartUploads(context.Context, *ListMultipartUploadsInput) (*ListMultipartUploadsOutput, error)
	//Lists the parts that have been uploaded for a specific multipart upload.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html
	ListParts(context.Context, *ListPartsInput) (*ListPartsOutput, error)
	//Returns metadata about all versions of the objects in a bucket.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjectVersions.html
	ListObjectVersions(context.Context, *ListObjectVersionsInput) (*ListObjectVersionsOutput, error)
	//A presigned URL gives you access to the object identified in the URL, provided that the creator of the presigned URL has permissions to access that object.
	//Refer https://docs.aws.amazon.com/AmazonS3/latest/userguide/PresignedUrlUploadObject.html
	SignURL(context.Context, *SignURLInput) (*SignURLOutput, error)
	//This action used to set download bandwidth limit speed.
	//Refer https://github.com/aliyun/aliyun-oss-go-sdk/blob/master/oss/client.go#L2106
	UpdateDownloadBandwidthRateLimit(context.Context, *UpdateBandwidthRateLimitInput) (*emptypb.Empty, error)
	//This action used to set upload bandwidth limit speed.
	//Refer https://github.com/aliyun/aliyun-oss-go-sdk/blob/master/oss/client.go#L2096
	UpdateUploadBandwidthRateLimit(context.Context, *UpdateBandwidthRateLimitInput) (*emptypb.Empty, error)
	//This action is used to append object.
	//Refer https://help.aliyun.com/document_detail/31981.html or https://github.com/minio/minio-java/issues/980
	AppendObject(ObjectStorageService_AppendObjectServer) error
	//Restores an archived copy of an object back.
	//Refer https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/API/API_RestoreObject.html
	RestoreObject(context.Context, *RestoreObjectInput) (*RestoreObjectOutput, error)
}

// UnimplementedObjectStorageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedObjectStorageServiceServer struct {
}

func (UnimplementedObjectStorageServiceServer) PutObject(ObjectStorageService_PutObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method PutObject not implemented")
}
func (UnimplementedObjectStorageServiceServer) GetObject(*GetObjectInput, ObjectStorageService_GetObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (UnimplementedObjectStorageServiceServer) DeleteObject(context.Context, *DeleteObjectInput) (*DeleteObjectOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedObjectStorageServiceServer) CopyObject(context.Context, *CopyObjectInput) (*CopyObjectOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyObject not implemented")
}
func (UnimplementedObjectStorageServiceServer) DeleteObjects(context.Context, *DeleteObjectsInput) (*DeleteObjectsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObjects not implemented")
}
func (UnimplementedObjectStorageServiceServer) ListObjects(context.Context, *ListObjectsInput) (*ListObjectsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjects not implemented")
}
func (UnimplementedObjectStorageServiceServer) HeadObject(context.Context, *HeadObjectInput) (*HeadObjectOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeadObject not implemented")
}
func (UnimplementedObjectStorageServiceServer) IsObjectExist(context.Context, *IsObjectExistInput) (*IsObjectExistOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsObjectExist not implemented")
}
func (UnimplementedObjectStorageServiceServer) PutObjectTagging(context.Context, *PutObjectTaggingInput) (*PutObjectTaggingOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutObjectTagging not implemented")
}
func (UnimplementedObjectStorageServiceServer) DeleteObjectTagging(context.Context, *DeleteObjectTaggingInput) (*DeleteObjectTaggingOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObjectTagging not implemented")
}
func (UnimplementedObjectStorageServiceServer) GetObjectTagging(context.Context, *GetObjectTaggingInput) (*GetObjectTaggingOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectTagging not implemented")
}
func (UnimplementedObjectStorageServiceServer) GetObjectCannedAcl(context.Context, *GetObjectCannedAclInput) (*GetObjectCannedAclOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectCannedAcl not implemented")
}
func (UnimplementedObjectStorageServiceServer) PutObjectCannedAcl(context.Context, *PutObjectCannedAclInput) (*PutObjectCannedAclOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutObjectCannedAcl not implemented")
}
func (UnimplementedObjectStorageServiceServer) CreateMultipartUpload(context.Context, *CreateMultipartUploadInput) (*CreateMultipartUploadOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMultipartUpload not implemented")
}
func (UnimplementedObjectStorageServiceServer) UploadPart(ObjectStorageService_UploadPartServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadPart not implemented")
}
func (UnimplementedObjectStorageServiceServer) UploadPartCopy(context.Context, *UploadPartCopyInput) (*UploadPartCopyOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPartCopy not implemented")
}
func (UnimplementedObjectStorageServiceServer) CompleteMultipartUpload(context.Context, *CompleteMultipartUploadInput) (*CompleteMultipartUploadOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteMultipartUpload not implemented")
}
func (UnimplementedObjectStorageServiceServer) AbortMultipartUpload(context.Context, *AbortMultipartUploadInput) (*AbortMultipartUploadOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortMultipartUpload not implemented")
}
func (UnimplementedObjectStorageServiceServer) ListMultipartUploads(context.Context, *ListMultipartUploadsInput) (*ListMultipartUploadsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMultipartUploads not implemented")
}
func (UnimplementedObjectStorageServiceServer) ListParts(context.Context, *ListPartsInput) (*ListPartsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListParts not implemented")
}
func (UnimplementedObjectStorageServiceServer) ListObjectVersions(context.Context, *ListObjectVersionsInput) (*ListObjectVersionsOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjectVersions not implemented")
}
func (UnimplementedObjectStorageServiceServer) SignURL(context.Context, *SignURLInput) (*SignURLOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignURL not implemented")
}
func (UnimplementedObjectStorageServiceServer) UpdateDownloadBandwidthRateLimit(context.Context, *UpdateBandwidthRateLimitInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDownloadBandwidthRateLimit not implemented")
}
func (UnimplementedObjectStorageServiceServer) UpdateUploadBandwidthRateLimit(context.Context, *UpdateBandwidthRateLimitInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUploadBandwidthRateLimit not implemented")
}
func (UnimplementedObjectStorageServiceServer) AppendObject(ObjectStorageService_AppendObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method AppendObject not implemented")
}
func (UnimplementedObjectStorageServiceServer) RestoreObject(context.Context, *RestoreObjectInput) (*RestoreObjectOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreObject not implemented")
}

// UnsafeObjectStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectStorageServiceServer will
// result in compilation errors.
type UnsafeObjectStorageServiceServer interface {
	mustEmbedUnimplementedObjectStorageServiceServer()
}

func RegisterObjectStorageServiceServer(s grpc.ServiceRegistrar, srv ObjectStorageServiceServer) {
	s.RegisterService(&ObjectStorageService_ServiceDesc, srv)
}

func _ObjectStorageService_PutObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ObjectStorageServiceServer).PutObject(&objectStorageServicePutObjectServer{stream})
}

type ObjectStorageService_PutObjectServer interface {
	SendAndClose(*PutObjectOutput) error
	Recv() (*PutObjectInput, error)
	grpc.ServerStream
}

type objectStorageServicePutObjectServer struct {
	grpc.ServerStream
}

func (x *objectStorageServicePutObjectServer) SendAndClose(m *PutObjectOutput) error {
	return x.ServerStream.SendMsg(m)
}

func (x *objectStorageServicePutObjectServer) Recv() (*PutObjectInput, error) {
	m := new(PutObjectInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ObjectStorageService_GetObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetObjectInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectStorageServiceServer).GetObject(m, &objectStorageServiceGetObjectServer{stream})
}

type ObjectStorageService_GetObjectServer interface {
	Send(*GetObjectOutput) error
	grpc.ServerStream
}

type objectStorageServiceGetObjectServer struct {
	grpc.ServerStream
}

func (x *objectStorageServiceGetObjectServer) Send(m *GetObjectOutput) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjectStorageService_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.s3.ObjectStorageService/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).DeleteObject(ctx, req.(*DeleteObjectInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_CopyObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyObjectInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).CopyObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.s3.ObjectStorageService/CopyObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).CopyObject(ctx, req.(*CopyObjectInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_DeleteObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).DeleteObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.s3.ObjectStorageService/DeleteObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).DeleteObjects(ctx, req.(*DeleteObjectsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_ListObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObjectsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).ListObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.s3.ObjectStorageService/ListObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).ListObjects(ctx, req.(*ListObjectsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_HeadObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeadObjectInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).HeadObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.s3.ObjectStorageService/HeadObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).HeadObject(ctx, req.(*HeadObjectInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_IsObjectExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsObjectExistInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).IsObjectExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.s3.ObjectStorageService/IsObjectExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).IsObjectExist(ctx, req.(*IsObjectExistInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_PutObjectTagging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutObjectTaggingInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).PutObjectTagging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.s3.ObjectStorageService/PutObjectTagging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).PutObjectTagging(ctx, req.(*PutObjectTaggingInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_DeleteObjectTagging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectTaggingInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).DeleteObjectTagging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.s3.ObjectStorageService/DeleteObjectTagging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).DeleteObjectTagging(ctx, req.(*DeleteObjectTaggingInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_GetObjectTagging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectTaggingInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).GetObjectTagging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.s3.ObjectStorageService/GetObjectTagging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).GetObjectTagging(ctx, req.(*GetObjectTaggingInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_GetObjectCannedAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectCannedAclInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).GetObjectCannedAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.s3.ObjectStorageService/GetObjectCannedAcl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).GetObjectCannedAcl(ctx, req.(*GetObjectCannedAclInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_PutObjectCannedAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutObjectCannedAclInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).PutObjectCannedAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.s3.ObjectStorageService/PutObjectCannedAcl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).PutObjectCannedAcl(ctx, req.(*PutObjectCannedAclInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_CreateMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultipartUploadInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).CreateMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.s3.ObjectStorageService/CreateMultipartUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).CreateMultipartUpload(ctx, req.(*CreateMultipartUploadInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_UploadPart_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ObjectStorageServiceServer).UploadPart(&objectStorageServiceUploadPartServer{stream})
}

type ObjectStorageService_UploadPartServer interface {
	SendAndClose(*UploadPartOutput) error
	Recv() (*UploadPartInput, error)
	grpc.ServerStream
}

type objectStorageServiceUploadPartServer struct {
	grpc.ServerStream
}

func (x *objectStorageServiceUploadPartServer) SendAndClose(m *UploadPartOutput) error {
	return x.ServerStream.SendMsg(m)
}

func (x *objectStorageServiceUploadPartServer) Recv() (*UploadPartInput, error) {
	m := new(UploadPartInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ObjectStorageService_UploadPartCopy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPartCopyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).UploadPartCopy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.s3.ObjectStorageService/UploadPartCopy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).UploadPartCopy(ctx, req.(*UploadPartCopyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_CompleteMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteMultipartUploadInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).CompleteMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.s3.ObjectStorageService/CompleteMultipartUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).CompleteMultipartUpload(ctx, req.(*CompleteMultipartUploadInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_AbortMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortMultipartUploadInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).AbortMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.s3.ObjectStorageService/AbortMultipartUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).AbortMultipartUpload(ctx, req.(*AbortMultipartUploadInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_ListMultipartUploads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMultipartUploadsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).ListMultipartUploads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.s3.ObjectStorageService/ListMultipartUploads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).ListMultipartUploads(ctx, req.(*ListMultipartUploadsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_ListParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPartsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).ListParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.s3.ObjectStorageService/ListParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).ListParts(ctx, req.(*ListPartsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_ListObjectVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObjectVersionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).ListObjectVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.s3.ObjectStorageService/ListObjectVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).ListObjectVersions(ctx, req.(*ListObjectVersionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_SignURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignURLInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).SignURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.s3.ObjectStorageService/SignURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).SignURL(ctx, req.(*SignURLInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_UpdateDownloadBandwidthRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBandwidthRateLimitInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).UpdateDownloadBandwidthRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.s3.ObjectStorageService/UpdateDownloadBandwidthRateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).UpdateDownloadBandwidthRateLimit(ctx, req.(*UpdateBandwidthRateLimitInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_UpdateUploadBandwidthRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBandwidthRateLimitInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).UpdateUploadBandwidthRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.s3.ObjectStorageService/UpdateUploadBandwidthRateLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).UpdateUploadBandwidthRateLimit(ctx, req.(*UpdateBandwidthRateLimitInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectStorageService_AppendObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ObjectStorageServiceServer).AppendObject(&objectStorageServiceAppendObjectServer{stream})
}

type ObjectStorageService_AppendObjectServer interface {
	SendAndClose(*AppendObjectOutput) error
	Recv() (*AppendObjectInput, error)
	grpc.ServerStream
}

type objectStorageServiceAppendObjectServer struct {
	grpc.ServerStream
}

func (x *objectStorageServiceAppendObjectServer) SendAndClose(m *AppendObjectOutput) error {
	return x.ServerStream.SendMsg(m)
}

func (x *objectStorageServiceAppendObjectServer) Recv() (*AppendObjectInput, error) {
	m := new(AppendObjectInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ObjectStorageService_RestoreObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreObjectInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectStorageServiceServer).RestoreObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.extension.v1.s3.ObjectStorageService/RestoreObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectStorageServiceServer).RestoreObject(ctx, req.(*RestoreObjectInput))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjectStorageService_ServiceDesc is the grpc.ServiceDesc for ObjectStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spec.proto.extension.v1.s3.ObjectStorageService",
	HandlerType: (*ObjectStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteObject",
			Handler:    _ObjectStorageService_DeleteObject_Handler,
		},
		{
			MethodName: "CopyObject",
			Handler:    _ObjectStorageService_CopyObject_Handler,
		},
		{
			MethodName: "DeleteObjects",
			Handler:    _ObjectStorageService_DeleteObjects_Handler,
		},
		{
			MethodName: "ListObjects",
			Handler:    _ObjectStorageService_ListObjects_Handler,
		},
		{
			MethodName: "HeadObject",
			Handler:    _ObjectStorageService_HeadObject_Handler,
		},
		{
			MethodName: "IsObjectExist",
			Handler:    _ObjectStorageService_IsObjectExist_Handler,
		},
		{
			MethodName: "PutObjectTagging",
			Handler:    _ObjectStorageService_PutObjectTagging_Handler,
		},
		{
			MethodName: "DeleteObjectTagging",
			Handler:    _ObjectStorageService_DeleteObjectTagging_Handler,
		},
		{
			MethodName: "GetObjectTagging",
			Handler:    _ObjectStorageService_GetObjectTagging_Handler,
		},
		{
			MethodName: "GetObjectCannedAcl",
			Handler:    _ObjectStorageService_GetObjectCannedAcl_Handler,
		},
		{
			MethodName: "PutObjectCannedAcl",
			Handler:    _ObjectStorageService_PutObjectCannedAcl_Handler,
		},
		{
			MethodName: "CreateMultipartUpload",
			Handler:    _ObjectStorageService_CreateMultipartUpload_Handler,
		},
		{
			MethodName: "UploadPartCopy",
			Handler:    _ObjectStorageService_UploadPartCopy_Handler,
		},
		{
			MethodName: "CompleteMultipartUpload",
			Handler:    _ObjectStorageService_CompleteMultipartUpload_Handler,
		},
		{
			MethodName: "AbortMultipartUpload",
			Handler:    _ObjectStorageService_AbortMultipartUpload_Handler,
		},
		{
			MethodName: "ListMultipartUploads",
			Handler:    _ObjectStorageService_ListMultipartUploads_Handler,
		},
		{
			MethodName: "ListParts",
			Handler:    _ObjectStorageService_ListParts_Handler,
		},
		{
			MethodName: "ListObjectVersions",
			Handler:    _ObjectStorageService_ListObjectVersions_Handler,
		},
		{
			MethodName: "SignURL",
			Handler:    _ObjectStorageService_SignURL_Handler,
		},
		{
			MethodName: "UpdateDownloadBandwidthRateLimit",
			Handler:    _ObjectStorageService_UpdateDownloadBandwidthRateLimit_Handler,
		},
		{
			MethodName: "UpdateUploadBandwidthRateLimit",
			Handler:    _ObjectStorageService_UpdateUploadBandwidthRateLimit_Handler,
		},
		{
			MethodName: "RestoreObject",
			Handler:    _ObjectStorageService_RestoreObject_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutObject",
			Handler:       _ObjectStorageService_PutObject_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetObject",
			Handler:       _ObjectStorageService_GetObject_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadPart",
			Handler:       _ObjectStorageService_UploadPart_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AppendObject",
			Handler:       _ObjectStorageService_AppendObject_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "oss.proto",
}
