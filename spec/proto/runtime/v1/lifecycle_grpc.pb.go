// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: lifecycle.proto

package runtime

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LifecycleClient is the client API for Lifecycle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LifecycleClient interface {
	// Apply the dynamic configuration.
	// The DynamicConfiguration here should be full configuration, not incremental configuration
	ApplyConfiguration(ctx context.Context, in *DynamicConfiguration, opts ...grpc.CallOption) (*ApplyConfigurationResponse, error)
}

type lifecycleClient struct {
	cc grpc.ClientConnInterface
}

func NewLifecycleClient(cc grpc.ClientConnInterface) LifecycleClient {
	return &lifecycleClient{cc}
}

func (c *lifecycleClient) ApplyConfiguration(ctx context.Context, in *DynamicConfiguration, opts ...grpc.CallOption) (*ApplyConfigurationResponse, error) {
	out := new(ApplyConfigurationResponse)
	err := c.cc.Invoke(ctx, "/spec.proto.runtime.v1.Lifecycle/ApplyConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LifecycleServer is the server API for Lifecycle service.
// All implementations should embed UnimplementedLifecycleServer
// for forward compatibility
type LifecycleServer interface {
	// Apply the dynamic configuration.
	// The DynamicConfiguration here should be full configuration, not incremental configuration
	ApplyConfiguration(context.Context, *DynamicConfiguration) (*ApplyConfigurationResponse, error)
}

// UnimplementedLifecycleServer should be embedded to have forward compatible implementations.
type UnimplementedLifecycleServer struct {
}

func (UnimplementedLifecycleServer) ApplyConfiguration(context.Context, *DynamicConfiguration) (*ApplyConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyConfiguration not implemented")
}

// UnsafeLifecycleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LifecycleServer will
// result in compilation errors.
type UnsafeLifecycleServer interface {
	mustEmbedUnimplementedLifecycleServer()
}

func RegisterLifecycleServer(s grpc.ServiceRegistrar, srv LifecycleServer) {
	s.RegisterService(&Lifecycle_ServiceDesc, srv)
}

func _Lifecycle_ApplyConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynamicConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifecycleServer).ApplyConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spec.proto.runtime.v1.Lifecycle/ApplyConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifecycleServer).ApplyConfiguration(ctx, req.(*DynamicConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

// Lifecycle_ServiceDesc is the grpc.ServiceDesc for Lifecycle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lifecycle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spec.proto.runtime.v1.Lifecycle",
	HandlerType: (*LifecycleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyConfiguration",
			Handler:    _Lifecycle_ApplyConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lifecycle.proto",
}
